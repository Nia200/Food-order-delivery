"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const config_1 = require("./config");
const path = require("path");
class SshBase extends command_1.Command {
    parseServerConfig(server, flags) {
        var _a, _b;
        let config = undefined;
        if (server) {
            config = config_1.getServerConfig(this.config.configDir, server);
        }
        if (!config) {
            // the server is not defined in config file
            if (!flags.host || !flags.username) {
                throw new Error("server name not provide or not registered, please specify --host, --username, --password/--keyFile or add configuration in " + path.join(this.config.configDir, "config.yaml"));
            }
            config = {
                name: flags.host,
                host: flags.host,
                username: flags.username,
                home: (_a = flags.home) !== null && _a !== void 0 ? _a : `/home/${flags.username}`,
                password: flags.password,
                identityFile: flags.identityFile,
                port: (_b = flags.port) !== null && _b !== void 0 ? _b : 22,
            };
        }
        else {
            // override
            if (flags.host) {
                config.host = flags.host;
            }
            if (flags.home) {
                config.home = flags.home;
            }
            if (flags.username) {
                config.username = flags.username;
            }
            if (flags.password) {
                config.password = flags.password;
            }
            if (flags.identityFile) {
                config.identityFile = flags.identityFile;
            }
            if (flags.port) {
                config.port = flags.port;
            }
        }
        return config;
    }
}
exports.default = SshBase;
SshBase.flags = {
    help: command_1.flags.help({ char: "h" }),
    host: command_1.flags.string({ char: "H", description: "host of the server" }),
    home: command_1.flags.string({ description: "home path on the server" }),
    username: command_1.flags.string({ char: "u", description: "username used to logon server" }),
    password: command_1.flags.string({ char: "p", description: "password to logon server" }),
    identityFile: command_1.flags.string({ char: "i", description: "path to ssh identity file to logon server" }),
    port: command_1.flags.string({ char: "P", description: "port of the ssh server" }),
};
//# sourceMappingURL=ssh-base.js.map