"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ssh_base_1 = require("../../lib/ssh-base");
const cmd_1 = require("@troubkit/cmd");
const child_process = require("child_process");
const sshpass_1 = require("../../lib/sshpass");
const log_1 = require("@troubkit/log");
const fs = require("fs");
const helpers_1 = require("../../lib/port/helpers");
class PortOpen extends ssh_base_1.default {
    async run() {
        var _a;
        const { argv, args, flags } = this.parse(PortOpen);
        if (argv.length < 2) {
            throw new Error("at least two argument is required");
        }
        const config = super.parseServerConfig(args.server, flags);
        let cmd = new cmd_1.Command("ssh");
        if (config.identityFile) {
            cmd.append("-i", config.identityFile);
        }
        else if (config.password) {
            // auto input password with sshpass
            cmd = sshpass_1.getOrInstallSshpass()
                .append(`-p '${config.password}'`)
                .append(cmd.toString());
        }
        cmd.append("-p", `${(_a = config.port) !== null && _a !== void 0 ? _a : 22}`);
        for (const arg of argv.slice(1)) {
            try {
                const fw = helpers_1.parseForwardPattern(config, arg);
                PortOpen.logger.info("Opening local port forwarding", {
                    local: fw.localStr,
                    remote: fw.remoteStr,
                });
                const fCmd = cmd.copy();
                fCmd.append("-fN -M");
                const socket = helpers_1.genForwardSocket(this.config.configDir, fw);
                if (fs.existsSync(socket)) {
                    // the port is previously opened
                    PortOpen.logger.warn("Local port forward has already been opened", {
                        local: fw.localStr,
                        remote: fw.remoteStr,
                    });
                    continue;
                }
                fCmd.append("-S", socket);
                fCmd.append(`-L ${fw.localAddress}:${fw.localPort}:${fw.remoteAddress}:${fw.remotePort}`);
                fCmd.append(`${config.username}@${config.host}`);
                console.log("$", fCmd.toString());
                const r = child_process.spawnSync(fCmd.command, fCmd.args, {
                    stdio: "inherit",
                    env: process.env,
                });
                if (r.error) {
                    if (fs.existsSync(socket)) {
                        fs.unlinkSync(socket);
                    }
                    throw r.error;
                }
                else if (r.status != 0) {
                    if (fs.existsSync(socket)) {
                        fs.unlinkSync(socket);
                    }
                    throw new Error("process exit with code " + r.status);
                }
                PortOpen.logger.info("Local port forwarding should be opened", {
                    local: fw.localStr,
                    remote: fw.remoteStr,
                });
            }
            catch (e) {
                PortOpen.logger.error("Open local port forward failed", { err: e.message });
                PortOpen.logger.trace("Open local port forward failed", {
                    err: e.message,
                    stack: e.stack,
                });
            }
        }
    }
}
exports.default = PortOpen;
PortOpen.description = "open ssh local port forwarding";
PortOpen.examples = [
    "$ ssh-server port:open localPort:remotePort ...",
];
PortOpen.flags = Object.assign(ssh_base_1.default.flags, {});
PortOpen.args = [
    {
        name: "server",
        required: true,
        description: "name of server predefined in config file",
    },
    {
        name: "remotePort:localPort",
        required: true,
        description: "port forward pattern",
    },
];
// this makes the parser not fail when it receives invalid arguments
// defaults to true
// set it to false if you need to accept variable arguments
PortOpen.strict = false;
PortOpen.logger = new log_1.ContextLogger("Port");
//# sourceMappingURL=open.js.map