"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ssh_base_1 = require("../lib/ssh-base");
const child_process = require("child_process");
const sshpass_1 = require("../lib/sshpass");
const cmd_1 = require("@troubkit/cmd");
const log_1 = require("@troubkit/log");
class Shell extends ssh_base_1.default {
    async run() {
        var _a, _b, _c;
        const { args, flags } = this.parse(Shell);
        const config = super.parseServerConfig(args.server, flags);
        let r;
        if (config.identityFile) {
            Shell.logger.info("Connecting server " + config.name);
            r = child_process.spawnSync("ssh", [
                "-i",
                config.identityFile,
                "-p",
                `${(_a = config.port) !== null && _a !== void 0 ? _a : 22}`,
                `${config.username}@${config.host}`,
            ], {
                stdio: "inherit",
                env: process.env,
            });
        }
        else if (config.password) {
            // auto input password with sshpass
            const cmd = sshpass_1.getOrInstallSshpass();
            cmd.append(`-p '${config.password}' ssh ${config.username}@${config.host}`);
            cmd.append("-p", `${(_b = config.port) !== null && _b !== void 0 ? _b : 22}`);
            Shell.logger.info("Connecting server " + config.name);
            r = child_process.spawnSync(cmd.command, cmd.args, {
                stdio: "inherit",
                env: process.env,
            });
        }
        else {
            // plain ssh
            Shell.logger.info("Connecting server " + config.name);
            const cmd = new cmd_1.Command(`ssh ${config.username}@${config.host}`);
            cmd.append("-p", `${(_c = config.port) !== null && _c !== void 0 ? _c : 22}`);
            r = child_process.spawnSync(cmd.command, cmd.args, {
                stdio: "inherit",
                env: process.env,
            });
        }
        if (!r) {
            return;
        }
        if (r.error) {
            throw r.error;
        }
        if (r.status != 0) {
            throw new Error("process exit with code " + r.status);
        }
    }
}
exports.default = Shell;
Shell.aliases = ["sh"];
Shell.description = "open server shell";
Shell.examples = [
    "$ ssh-server shell [serverName]",
];
Shell.flags = ssh_base_1.default.flags;
Shell.args = [{ name: "server", description: "name of server predefined in config file" }];
Shell.logger = new log_1.ContextLogger("Shell");
//# sourceMappingURL=shell.js.map